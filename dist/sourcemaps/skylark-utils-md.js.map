{"version":3,"sources":["skylark-utils-md.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","markdown","Lexer","options","this","tokens","links","marked","defaults","rules","block","normal","gfm","tables","InlineLexer","inline","renderer","Renderer","breaks","pedantic","Parser","token","escape","html","encode","replace","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","regex","opt","source","self","name","val","RegExp","noop","merge","obj","target","key","arguments","Object","prototype","call","src","callback","pending","highlight","lex","e","done","err","out","parse","type","text","lang","code","escaped","message","silent","newline","fences","hr","heading","nptable","lheading","blockquote","list","def","table","paragraph","bullet","item","_tag","lexer","top","bq","next","loose","cap","bull","b","space","l","exec","depth","header","align","cells","test","ordered","match","indexOf","smartLists","slice","sanitize","pre","href","title","charCodeAt","autolink","url","tag","link","reflink","nolink","strong","em","br","del","_inside","_href","output","mangle","inLink","outputLink","codespan","smartypants","image","ch","Math","random","toString","langPrefix","quote","level","raw","headerPrefix","xhtml","body","listitem","tablerow","content","tablecell","flags","prot","decodeURIComponent","parser","reverse","tok","peek","parseText","row","cell","j","setOptions","inlineLexer","langx","mixin","extend","destination","repeat","character","count","Array","isBlock","node","blockElements","nodeName","isVoid","voidElements","hasVoid","querySelector","voidSelector","Rules","_keep","_remove","blankRule","replacement","blankReplacement","keepReplacement","defaultRule","defaultReplacement","array","findRule","rule","filterValue","filter","isArray","TypeError","collapseWhitespace","element","isPre","firstChild","prevText","prevVoid","prev","nodeType","data","substr","remove","nextNode","nextSibling","parentNode","removeChild","current","canParseHTMLNatively","root","DOMParser","canParse","parseFromString","createHTMLParser","JSDOM","string","document","RootNode","input","doc","htmlParser","getElementById","cloneNode","_htmlParser","HTMLParser","Node","isCode","isBlank","flankingWhitespace","textContent","leading","trailing","hasLeading","hasTrailing","isFlankedByWhitespace","side","sibling","regExp","isFlanked","previousSibling","nodeValue","TurndownService","headingStyle","bulletListMarker","codeBlockStyle","fence","emDelimiter","strongDelimiter","linkStyle","linkReferenceStyle","outerHTML","process","reduce","childNodes","replacementForNode","postProcess","append","forNode","whitespace","trim","separatingNewlines","newlines","trailingNewLinesRegExp","leadingNewLinesRegExp","sort","maxNewlines","string1","string2","separator","canConvert","lineBreak","hLevel","Number","underline","parent","lastElementChild","listItem","prefix","start","getAttribute","index","children","indentedCodeBlock","fencedCodeBlock","className","language","horizontalRule","inlineLink","referenceLink","reference","references","emphasis","hasSiblings","isCodeBlock","delimiter","leadingSpace","trailingSpace","matches","alt","titlePart","add","unshift","keep","fn","escapes","turndown","use","plugin","addRule","accumulator","Turndown","main"],"mappings":"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","file":"../skylark-utils-md.js","sourcesContent":["define('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils-md/markdown',[\r\n    \"skylark-utils/skylark\"\r\n], function(skylark) {\r\n\t\r\n\treturn skylark.markdown = skylark.markdown || {};\r\n});\ndefine('skylark-utils-md/primitives/marked',[],function() {\n  /**\n   * marked - a markdown parser\n   * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n   * https://github.com/chjj/marked\n   */\n\n  /**\n   * Block-Level Grammar\n   */\n\n  var block = {\n    newline: /^\\n+/,\n    code: /^( {4}[^\\n]+\\n*)+/,\n    fences: noop,\n    hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n    heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n    nptable: noop,\n    lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n    blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n    list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n    html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n    table: noop,\n    paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n    text: /^[^\\n]+/\n  };\n\n  block.bullet = /(?:[*+-]|\\d+\\.)/;\n  block.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\n  block.item = replace(block.item, 'gm')\n    (/bull/g, block.bullet)\n    ();\n\n  block.list = replace(block.list)\n    (/bull/g, block.bullet)\n    ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n    ('def', '\\\\n+(?=' + block.def.source + ')')\n    ();\n\n  block.blockquote = replace(block.blockquote)\n    ('def', block.def)\n    ();\n\n  block._tag = '(?!(?:'\n    + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n    + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n    + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\n  block.html = replace(block.html)\n    ('comment', /<!--[\\s\\S]*?-->/)\n    ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n    ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n    (/tag/g, block._tag)\n    ();\n\n  block.paragraph = replace(block.paragraph)\n    ('hr', block.hr)\n    ('heading', block.heading)\n    ('lheading', block.lheading)\n    ('blockquote', block.blockquote)\n    ('tag', '<' + block._tag)\n    ('def', block.def)\n    ();\n\n  /**\n   * Normal Block Grammar\n   */\n\n  block.normal = merge({}, block);\n\n  /**\n   * GFM Block Grammar\n   */\n\n  block.gfm = merge({}, block.normal, {\n    fences: /^ *(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\n    paragraph: /^/\n  });\n\n  block.gfm.paragraph = replace(block.paragraph)\n    ('(?!', '(?!'\n      + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n      + block.list.source.replace('\\\\1', '\\\\3') + '|')\n    ();\n\n  /**\n   * GFM + Tables Block Grammar\n   */\n\n  block.tables = merge({}, block.gfm, {\n    nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n    table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n  });\n\n  /**\n   * Block Lexer\n   */\n\n  function Lexer(options) {\n    this.tokens = [];\n    this.tokens.links = {};\n    this.options = options || marked.defaults;\n    this.rules = block.normal;\n\n    if (this.options.gfm) {\n      if (this.options.tables) {\n        this.rules = block.tables;\n      } else {\n        this.rules = block.gfm;\n      }\n    }\n  }\n\n  /**\n   * Expose Block Rules\n   */\n\n  Lexer.rules = block;\n\n  /**\n   * Static Lex Method\n   */\n\n  Lexer.lex = function(src, options) {\n    var lexer = new Lexer(options);\n    return lexer.lex(src);\n  };\n\n  /**\n   * Preprocessing\n   */\n\n  Lexer.prototype.lex = function(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ')\n      .replace(/\\u00a0/g, ' ')\n      .replace(/\\u2424/g, '\\n');\n\n    return this.token(src, true);\n  };\n\n  /**\n   * Lexing\n   */\n\n  Lexer.prototype.token = function(src, top, bq) {\n    var src = src.replace(/^ +$/gm, '')\n      , next\n      , loose\n      , cap\n      , bull\n      , b\n      , item\n      , space\n      , i\n      , l;\n\n    while (src) {\n      // newline\n      if (cap = this.rules.newline.exec(src)) {\n        src = src.substring(cap[0].length);\n        if (cap[0].length > 1) {\n          this.tokens.push({\n            type: 'space'\n          });\n        }\n      }\n\n      // code\n      if (cap = this.rules.code.exec(src)) {\n        src = src.substring(cap[0].length);\n        cap = cap[0].replace(/^ {4}/gm, '');\n        this.tokens.push({\n          type: 'code',\n          text: !this.options.pedantic\n            ? cap.replace(/\\n+$/, '')\n            : cap\n        });\n        continue;\n      }\n\n      // fences (gfm)\n      if (cap = this.rules.fences.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'code',\n          lang: cap[2],\n          text: cap[3]\n        });\n        continue;\n      }\n\n      // heading\n      if (cap = this.rules.heading.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[1].length,\n          text: cap[2]\n        });\n        continue;\n      }\n\n      // table no leading pipe (gfm)\n      if (top && (cap = this.rules.nptable.exec(src))) {\n        src = src.substring(cap[0].length);\n\n        item = {\n          type: 'table',\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3].replace(/\\n$/, '').split('\\n')\n        };\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = item.cells[i].split(/ *\\| */);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n\n      // lheading\n      if (cap = this.rules.lheading.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[2] === '=' ? 1 : 2,\n          text: cap[1]\n        });\n        continue;\n      }\n\n      // hr\n      if (cap = this.rules.hr.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'hr'\n        });\n        continue;\n      }\n\n      // blockquote\n      if (cap = this.rules.blockquote.exec(src)) {\n        src = src.substring(cap[0].length);\n\n        this.tokens.push({\n          type: 'blockquote_start'\n        });\n\n        cap = cap[0].replace(/^ *> ?/gm, '');\n\n        // Pass `top` to keep the current\n        // \"toplevel\" state. This is exactly\n        // how markdown.pl works.\n        this.token(cap, top, true);\n\n        this.tokens.push({\n          type: 'blockquote_end'\n        });\n\n        continue;\n      }\n\n      // list\n      if (cap = this.rules.list.exec(src)) {\n        src = src.substring(cap[0].length);\n        bull = cap[2];\n\n        this.tokens.push({\n          type: 'list_start',\n          ordered: bull.length > 1\n        });\n\n        // Get each top-level item.\n        cap = cap[0].match(this.rules.item);\n\n        next = false;\n        l = cap.length;\n        i = 0;\n\n        for (; i < l; i++) {\n          item = cap[i];\n\n          // Remove the list item's bullet\n          // so it is seen as the next token.\n          space = item.length;\n          item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n          // Outdent whatever the\n          // list item contains. Hacky.\n          if (~item.indexOf('\\n ')) {\n            space -= item.length;\n            item = !this.options.pedantic\n              ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n              : item.replace(/^ {1,4}/gm, '');\n          }\n\n          // Determine whether the next list item belongs here.\n          // Backpedal if it does not belong in this list.\n          if (this.options.smartLists && i !== l - 1) {\n            b = block.bullet.exec(cap[i + 1])[0];\n            if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n              src = cap.slice(i + 1).join('\\n') + src;\n              i = l - 1;\n            }\n          }\n\n          // Determine whether item is loose or not.\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          // for discount behavior.\n          loose = next || /\\n\\n(?!\\s*$)/.test(item);\n          if (i !== l - 1) {\n            next = item.charAt(item.length - 1) === '\\n';\n            if (!loose) loose = next;\n          }\n\n          this.tokens.push({\n            type: loose\n              ? 'loose_item_start'\n              : 'list_item_start'\n          });\n\n          // Recurse.\n          this.token(item, false, bq);\n\n          this.tokens.push({\n            type: 'list_item_end'\n          });\n        }\n\n        this.tokens.push({\n          type: 'list_end'\n        });\n\n        continue;\n      }\n\n      // html\n      if (cap = this.rules.html.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: this.options.sanitize\n            ? 'paragraph'\n            : 'html',\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n          text: cap[0]\n        });\n        continue;\n      }\n\n      // def\n      if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n        src = src.substring(cap[0].length);\n        this.tokens.links[cap[1].toLowerCase()] = {\n          href: cap[2],\n          title: cap[3]\n        };\n        continue;\n      }\n\n      // table (gfm)\n      if (top && (cap = this.rules.table.exec(src))) {\n        src = src.substring(cap[0].length);\n\n        item = {\n          type: 'table',\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n        };\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = item.cells[i]\n            .replace(/^ *\\| *| *\\| *$/g, '')\n            .split(/ *\\| */);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n\n      // top-level paragraph\n      if (top && (cap = this.rules.paragraph.exec(src))) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'paragraph',\n          text: cap[1].charAt(cap[1].length - 1) === '\\n'\n            ? cap[1].slice(0, -1)\n            : cap[1]\n        });\n        continue;\n      }\n\n      // text\n      if (cap = this.rules.text.exec(src)) {\n        // Top-level should never reach here.\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'text',\n          text: cap[0]\n        });\n        continue;\n      }\n\n      if (src) {\n        throw new\n          Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return this.tokens;\n  };\n\n  /**\n   * Inline-Level Grammar\n   */\n\n  var inline = {\n    escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n    autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n    url: noop,\n    tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n    link: /^!?\\[(inside)\\]\\(href\\)/,\n    reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n    nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n    strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n    em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n    code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n    br: /^ {2,}\\n(?!\\s*$)/,\n    del: noop,\n    text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n  };\n\n  inline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\n  inline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\n  inline.link = replace(inline.link)\n    ('inside', inline._inside)\n    ('href', inline._href)\n    ();\n\n  inline.reflink = replace(inline.reflink)\n    ('inside', inline._inside)\n    ();\n\n  /**\n   * Normal Inline Grammar\n   */\n\n  inline.normal = merge({}, inline);\n\n  /**\n   * Pedantic Inline Grammar\n   */\n\n  inline.pedantic = merge({}, inline.normal, {\n    strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n  });\n\n  /**\n   * GFM Inline Grammar\n   */\n\n  inline.gfm = merge({}, inline.normal, {\n    escape: replace(inline.escape)('])', '~|])')(),\n    url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n    del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n    text: replace(inline.text)\n      (']|', '~]|')\n      ('|', '|https?://|')\n      ()\n  });\n\n  /**\n   * GFM + Line Breaks Inline Grammar\n   */\n\n  inline.breaks = merge({}, inline.gfm, {\n    br: replace(inline.br)('{2,}', '*')(),\n    text: replace(inline.gfm.text)('{2,}', '*')()\n  });\n\n  /**\n   * Inline Lexer & Compiler\n   */\n\n  function InlineLexer(links, options) {\n    this.options = options || marked.defaults;\n    this.links = links;\n    this.rules = inline.normal;\n    this.renderer = this.options.renderer || new Renderer;\n    this.renderer.options = this.options;\n\n    if (!this.links) {\n      throw new\n        Error('Tokens array requires a `links` property.');\n    }\n\n    if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inline.breaks;\n      } else {\n        this.rules = inline.gfm;\n      }\n    } else if (this.options.pedantic) {\n      this.rules = inline.pedantic;\n    }\n  }\n\n  /**\n   * Expose Inline Rules\n   */\n\n  InlineLexer.rules = inline;\n\n  /**\n   * Static Lexing/Compiling Method\n   */\n\n  InlineLexer.output = function(src, links, options) {\n    var inline = new InlineLexer(links, options);\n    return inline.output(src);\n  };\n\n  /**\n   * Lexing/Compiling\n   */\n\n  InlineLexer.prototype.output = function(src) {\n    var out = ''\n      , link\n      , text\n      , href\n      , cap;\n\n    while (src) {\n      // escape\n      if (cap = this.rules.escape.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += cap[1];\n        continue;\n      }\n\n      // autolink\n      if (cap = this.rules.autolink.exec(src)) {\n        src = src.substring(cap[0].length);\n        if (cap[2] === '@') {\n          text = cap[1].charAt(6) === ':'\n            ? this.mangle(cap[1].substring(7))\n            : this.mangle(cap[1]);\n          href = this.mangle('mailto:') + text;\n        } else {\n          text = escape(cap[1]);\n          href = text;\n        }\n        out += this.renderer.link(href, null, text);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        src = src.substring(cap[0].length);\n        text = escape(cap[1]);\n        href = text;\n        out += this.renderer.link(href, null, text);\n        continue;\n      }\n\n      // tag\n      if (cap = this.rules.tag.exec(src)) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true;\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false;\n        }\n        src = src.substring(cap[0].length);\n        out += this.options.sanitize\n          ? escape(cap[0])\n          : cap[0];\n        continue;\n      }\n\n      // link\n      if (cap = this.rules.link.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.inLink = true;\n        out += this.outputLink(cap, {\n          href: cap[2],\n          title: cap[3]\n        });\n        this.inLink = false;\n        continue;\n      }\n\n      // reflink, nolink\n      if ((cap = this.rules.reflink.exec(src))\n          || (cap = this.rules.nolink.exec(src))) {\n        src = src.substring(cap[0].length);\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = this.links[link.toLowerCase()];\n        if (!link || !link.href) {\n          out += cap[0].charAt(0);\n          src = cap[0].substring(1) + src;\n          continue;\n        }\n        this.inLink = true;\n        out += this.outputLink(cap, link);\n        this.inLink = false;\n        continue;\n      }\n\n      // strong\n      if (cap = this.rules.strong.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.strong(this.output(cap[2] || cap[1]));\n        continue;\n      }\n\n      // em\n      if (cap = this.rules.em.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.em(this.output(cap[2] || cap[1]));\n        continue;\n      }\n\n      // code\n      if (cap = this.rules.code.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.codespan(escape(cap[2], true));\n        continue;\n      }\n\n      // br\n      if (cap = this.rules.br.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.br();\n        continue;\n      }\n\n      // del (gfm)\n      if (cap = this.rules.del.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.del(this.output(cap[1]));\n        continue;\n      }\n\n      // text\n      if (cap = this.rules.text.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += escape(this.smartypants(cap[0]));\n        continue;\n      }\n\n      if (src) {\n        throw new\n          Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return out;\n  };\n\n  /**\n   * Compile Link\n   */\n\n  InlineLexer.prototype.outputLink = function(cap, link) {\n    var href = escape(link.href)\n      , title = link.title ? escape(link.title) : null;\n\n    return cap[0].charAt(0) !== '!'\n      ? this.renderer.link(href, title, this.output(cap[1]))\n      : this.renderer.image(href, title, escape(cap[1]));\n  };\n\n  /**\n   * Smartypants Transformations\n   */\n\n  InlineLexer.prototype.smartypants = function(text) {\n    if (!this.options.smartypants) return text;\n    return text\n      // em-dashes\n      .replace(/--/g, '\\u2014')\n      // opening singles\n      .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n      // closing singles & apostrophes\n      .replace(/'/g, '\\u2019')\n      // opening doubles\n      .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n      // closing doubles\n      .replace(/\"/g, '\\u201d')\n      // ellipses\n      .replace(/\\.{3}/g, '\\u2026');\n  };\n\n  /**\n   * Mangle Links\n   */\n\n  InlineLexer.prototype.mangle = function(text) {\n    var out = ''\n      , l = text.length\n      , i = 0\n      , ch;\n\n    for (; i < l; i++) {\n      ch = text.charCodeAt(i);\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n      out += '&#' + ch + ';';\n    }\n\n    return out;\n  };\n\n  /**\n   * Renderer\n   */\n\n  function Renderer(options) {\n    this.options = options || {};\n  }\n\n  Renderer.prototype.code = function(code, lang, escaped) {\n    if (this.options.highlight) {\n      var out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '\\n</code></pre>';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>\\n';\n  };\n\n  Renderer.prototype.blockquote = function(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  };\n\n  Renderer.prototype.html = function(html) {\n    return html;\n  };\n\n  Renderer.prototype.heading = function(text, level, raw) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  };\n\n  Renderer.prototype.hr = function() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  };\n\n  Renderer.prototype.list = function(body, ordered) {\n    var type = ordered ? 'ol' : 'ul';\n    return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n  };\n\n  Renderer.prototype.listitem = function(text) {\n    return '<li>' + text + '</li>\\n';\n  };\n\n  Renderer.prototype.paragraph = function(text) {\n    return '<p>' + text + '</p>\\n';\n  };\n\n  Renderer.prototype.table = function(header, body) {\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + '<tbody>\\n'\n      + body\n      + '</tbody>\\n'\n      + '</table>\\n';\n  };\n\n  Renderer.prototype.tablerow = function(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  };\n\n  Renderer.prototype.tablecell = function(content, flags) {\n    var type = flags.header ? 'th' : 'td';\n    var tag = flags.align\n      ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  };\n\n  // span level renderer\n  Renderer.prototype.strong = function(text) {\n    return '<strong>' + text + '</strong>';\n  };\n\n  Renderer.prototype.em = function(text) {\n    return '<em>' + text + '</em>';\n  };\n\n  Renderer.prototype.codespan = function(text) {\n    return '<code>' + text + '</code>';\n  };\n\n  Renderer.prototype.br = function() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  };\n\n  Renderer.prototype.del = function(text) {\n    return '<del>' + text + '</del>';\n  };\n\n  Renderer.prototype.link = function(href, title, text) {\n    if (this.options.sanitize) {\n      try {\n        var prot = decodeURIComponent(unescape(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase();\n      } catch (e) {\n        return '';\n      }\n      if (prot.indexOf('javascript:') === 0) {\n        return '';\n      }\n    }\n    var out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  };\n\n  Renderer.prototype.image = function(href, title, text) {\n    var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  };\n\n  /**\n   * Parsing & Compiling\n   */\n\n  function Parser(options) {\n    this.tokens = [];\n    this.token = null;\n    this.options = options || marked.defaults;\n    this.options.renderer = this.options.renderer || new Renderer;\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n  }\n\n  /**\n   * Static Parse Method\n   */\n\n  Parser.parse = function(src, options, renderer) {\n    var parser = new Parser(options, renderer);\n    return parser.parse(src);\n  };\n\n  /**\n   * Parse Loop\n   */\n\n  Parser.prototype.parse = function(src) {\n    this.inline = new InlineLexer(src.links, this.options, this.renderer);\n    this.tokens = src.reverse();\n\n    var out = '';\n    while (this.next()) {\n      out += this.tok();\n    }\n\n    return out;\n  };\n\n  /**\n   * Next Token\n   */\n\n  Parser.prototype.next = function() {\n    return this.token = this.tokens.pop();\n  };\n\n  /**\n   * Preview Next Token\n   */\n\n  Parser.prototype.peek = function() {\n    return this.tokens[this.tokens.length - 1] || 0;\n  };\n\n  /**\n   * Parse Text Tokens\n   */\n\n  Parser.prototype.parseText = function() {\n    var body = this.token.text;\n\n    while (this.peek().type === 'text') {\n      body += '\\n' + this.next().text;\n    }\n\n    return this.inline.output(body);\n  };\n\n  /**\n   * Parse Current Token\n   */\n\n  Parser.prototype.tok = function() {\n    switch (this.token.type) {\n      case 'space': {\n        return '';\n      }\n      case 'hr': {\n        return this.renderer.hr();\n      }\n      case 'heading': {\n        return this.renderer.heading(\n          this.inline.output(this.token.text),\n          this.token.depth,\n          this.token.text);\n      }\n      case 'code': {\n        return this.renderer.code(this.token.text,\n          this.token.lang,\n          this.token.escaped);\n      }\n      case 'table': {\n        var header = ''\n          , body = ''\n          , i\n          , row\n          , cell\n          , flags\n          , j;\n\n        // header\n        cell = '';\n        for (i = 0; i < this.token.header.length; i++) {\n          flags = { header: true, align: this.token.align[i] };\n          cell += this.renderer.tablecell(\n            this.inline.output(this.token.header[i]),\n            { header: true, align: this.token.align[i] }\n          );\n        }\n        header += this.renderer.tablerow(cell);\n\n        for (i = 0; i < this.token.cells.length; i++) {\n          row = this.token.cells[i];\n\n          cell = '';\n          for (j = 0; j < row.length; j++) {\n            cell += this.renderer.tablecell(\n              this.inline.output(row[j]),\n              { header: false, align: this.token.align[j] }\n            );\n          }\n\n          body += this.renderer.tablerow(cell);\n        }\n        return this.renderer.table(header, body);\n      }\n      case 'blockquote_start': {\n        var body = '';\n\n        while (this.next().type !== 'blockquote_end') {\n          body += this.tok();\n        }\n\n        return this.renderer.blockquote(body);\n      }\n      case 'list_start': {\n        var body = ''\n          , ordered = this.token.ordered;\n\n        while (this.next().type !== 'list_end') {\n          body += this.tok();\n        }\n\n        return this.renderer.list(body, ordered);\n      }\n      case 'list_item_start': {\n        var body = '';\n\n        while (this.next().type !== 'list_item_end') {\n          body += this.token.type === 'text'\n            ? this.parseText()\n            : this.tok();\n        }\n\n        return this.renderer.listitem(body);\n      }\n      case 'loose_item_start': {\n        var body = '';\n\n        while (this.next().type !== 'list_item_end') {\n          body += this.tok();\n        }\n\n        return this.renderer.listitem(body);\n      }\n      case 'html': {\n        var html = !this.token.pre && !this.options.pedantic\n          ? this.inline.output(this.token.text)\n          : this.token.text;\n        return this.renderer.html(html);\n      }\n      case 'paragraph': {\n        return this.renderer.paragraph(this.inline.output(this.token.text));\n      }\n      case 'text': {\n        return this.renderer.paragraph(this.parseText());\n      }\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function escape(html, encode) {\n    return html\n      .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;');\n  }\n\n  function unescape(html) {\n    return html.replace(/&([#\\w]+);/g, function(_, n) {\n      n = n.toLowerCase();\n      if (n === 'colon') return ':';\n      if (n.charAt(0) === '#') {\n        return n.charAt(1) === 'x'\n          ? String.fromCharCode(parseInt(n.substring(2), 16))\n          : String.fromCharCode(+n.substring(1));\n      }\n      return '';\n    });\n  }\n\n  function replace(regex, opt) {\n    regex = regex.source;\n    opt = opt || '';\n    return function self(name, val) {\n      if (!name) return new RegExp(regex, opt);\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return self;\n    };\n  }\n\n  function noop() {}\n  noop.exec = noop;\n\n  function merge(obj) {\n    var i = 1\n      , target\n      , key;\n\n    for (; i < arguments.length; i++) {\n      target = arguments[i];\n      for (key in target) {\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n          obj[key] = target[key];\n        }\n      }\n    }\n\n    return obj;\n  }\n\n\n  /**\n   * Marked\n   */\n\n  function marked(src, opt, callback) {\n    if (callback || typeof opt === 'function') {\n      if (!callback) {\n        callback = opt;\n        opt = null;\n      }\n\n      opt = merge({}, marked.defaults, opt || {});\n\n      var highlight = opt.highlight\n        , tokens\n        , pending\n        , i = 0;\n\n      try {\n        tokens = Lexer.lex(src, opt)\n      } catch (e) {\n        return callback(e);\n      }\n\n      pending = tokens.length;\n\n      var done = function(err) {\n        if (err) {\n          opt.highlight = highlight;\n          return callback(err);\n        }\n\n        var out;\n\n        try {\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n\n        opt.highlight = highlight;\n\n        return err\n          ? callback(err)\n          : callback(null, out);\n      };\n\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n\n      delete opt.highlight;\n\n      if (!pending) return done();\n\n      for (; i < tokens.length; i++) {\n        (function(token) {\n          if (token.type !== 'code') {\n            return --pending || done();\n          }\n          return highlight(token.text, token.lang, function(err, code) {\n            if (err) return done(err);\n            if (code == null || code === token.text) {\n              return --pending || done();\n            }\n            token.text = code;\n            token.escaped = true;\n            --pending || done();\n          });\n        })(tokens[i]);\n      }\n\n      return;\n    }\n    try {\n      if (opt) opt = merge({}, marked.defaults, opt);\n      return Parser.parse(Lexer.lex(src, opt), opt);\n    } catch (e) {\n      e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n      if ((opt || marked.defaults).silent) {\n        return '<p>An error occured:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Options\n   */\n\n  marked.options =\n  marked.setOptions = function(opt) {\n    merge(marked.defaults, opt);\n    return marked;\n  };\n\n  marked.defaults = {\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: false,\n    smartLists: false,\n    silent: false,\n    highlight: null,\n    langPrefix: 'lang-',\n    smartypants: false,\n    headerPrefix: '',\n    renderer: new Renderer,\n    xhtml: false\n  };\n\n  /**\n   * Expose\n   */\n\n  marked.Parser = Parser;\n  marked.parser = Parser.parse;\n\n  marked.Renderer = Renderer;\n\n  marked.Lexer = Lexer;\n  marked.lexer = Lexer.lex;\n\n  marked.InlineLexer = InlineLexer;\n  marked.inlineLexer = InlineLexer.output;\n\n  marked.parse = marked;\n\n  return marked;\n});\ndefine('skylark-utils-md/Parser',[\r\n\t\"skylark-langx/langx\",\r\n    \"./markdown\",\r\n    \"./primitives/marked\"\r\n], function(langx,markdown, marked) {\r\n\tvar Parser = markdown.Parser;\r\n\r\n   langx.mixin(Parser,markdown);\r\n\r\n   return Parser ;\r\n});\ndefine('skylark-utils-md/primitives/turndown',[],function () { \n  'use strict';\n\n  // original version : 5.0.1\n  function extend (destination) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) destination[key] = source[key];\n      }\n    }\n    return destination\n  }\n\n  function repeat (character, count) {\n    return Array(count + 1).join(character)\n  }\n\n  var blockElements = [\n    'address', 'article', 'aside', 'audio', 'blockquote', 'body', 'canvas',\n    'center', 'dd', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption',\n    'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n    'header', 'hgroup', 'hr', 'html', 'isindex', 'li', 'main', 'menu', 'nav',\n    'noframes', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table',\n    'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\n  ];\n\n  function isBlock (node) {\n    return blockElements.indexOf(node.nodeName.toLowerCase()) !== -1\n  }\n\n  var voidElements = [\n    'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',\n    'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'\n  ];\n\n  function isVoid (node) {\n    return voidElements.indexOf(node.nodeName.toLowerCase()) !== -1\n  }\n\n  var voidSelector = voidElements.join();\n  function hasVoid (node) {\n    return node.querySelector && node.querySelector(voidSelector)\n  }\n\n  var rules = {};\n\n  rules.paragraph = {\n    filter: 'p',\n\n    replacement: function (content) {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  };\n\n  rules.lineBreak = {\n    filter: 'br',\n\n    replacement: function (content, node, options) {\n      return options.br + '\\n'\n    }\n  };\n\n  rules.heading = {\n    filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n    replacement: function (content, node, options) {\n      var hLevel = Number(node.nodeName.charAt(1));\n\n      if (options.headingStyle === 'setext' && hLevel < 3) {\n        var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\n        return (\n          '\\n\\n' + content + '\\n' + underline + '\\n\\n'\n        )\n      } else {\n        return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\n      }\n    }\n  };\n\n  rules.blockquote = {\n    filter: 'blockquote',\n\n    replacement: function (content) {\n      content = content.replace(/^\\n+|\\n+$/g, '');\n      content = content.replace(/^/gm, '> ');\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  };\n\n  rules.list = {\n    filter: ['ul', 'ol'],\n\n    replacement: function (content, node) {\n      var parent = node.parentNode;\n      if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\n        return '\\n' + content\n      } else {\n        return '\\n\\n' + content + '\\n\\n'\n      }\n    }\n  };\n\n  rules.listItem = {\n    filter: 'li',\n\n    replacement: function (content, node, options) {\n      content = content\n        .replace(/^\\n+/, '') // remove leading newlines\n        .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n        .replace(/\\n/gm, '\\n    '); // indent\n      var prefix = options.bulletListMarker + '   ';\n      var parent = node.parentNode;\n      if (parent.nodeName === 'OL') {\n        var start = parent.getAttribute('start');\n        var index = Array.prototype.indexOf.call(parent.children, node);\n        prefix = (start ? Number(start) + index : index + 1) + '.  ';\n      }\n      return (\n        prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\n      )\n    }\n  };\n\n  rules.indentedCodeBlock = {\n    filter: function (node, options) {\n      return (\n        options.codeBlockStyle === 'indented' &&\n        node.nodeName === 'PRE' &&\n        node.firstChild &&\n        node.firstChild.nodeName === 'CODE'\n      )\n    },\n\n    replacement: function (content, node, options) {\n      return (\n        '\\n\\n    ' +\n        node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\n        '\\n\\n'\n      )\n    }\n  };\n\n  rules.fencedCodeBlock = {\n    filter: function (node, options) {\n      return (\n        options.codeBlockStyle === 'fenced' &&\n        node.nodeName === 'PRE' &&\n        node.firstChild &&\n        node.firstChild.nodeName === 'CODE'\n      )\n    },\n\n    replacement: function (content, node, options) {\n      var className = node.firstChild.className || '';\n      var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n\n      return (\n        '\\n\\n' + options.fence + language + '\\n' +\n        node.firstChild.textContent +\n        '\\n' + options.fence + '\\n\\n'\n      )\n    }\n  };\n\n  rules.horizontalRule = {\n    filter: 'hr',\n\n    replacement: function (content, node, options) {\n      return '\\n\\n' + options.hr + '\\n\\n'\n    }\n  };\n\n  rules.inlineLink = {\n    filter: function (node, options) {\n      return (\n        options.linkStyle === 'inlined' &&\n        node.nodeName === 'A' &&\n        node.getAttribute('href')\n      )\n    },\n\n    replacement: function (content, node) {\n      var href = node.getAttribute('href');\n      var title = node.title ? ' \"' + node.title + '\"' : '';\n      return '[' + content + '](' + href + title + ')'\n    }\n  };\n\n  rules.referenceLink = {\n    filter: function (node, options) {\n      return (\n        options.linkStyle === 'referenced' &&\n        node.nodeName === 'A' &&\n        node.getAttribute('href')\n      )\n    },\n\n    replacement: function (content, node, options) {\n      var href = node.getAttribute('href');\n      var title = node.title ? ' \"' + node.title + '\"' : '';\n      var replacement;\n      var reference;\n\n      switch (options.linkReferenceStyle) {\n        case 'collapsed':\n          replacement = '[' + content + '][]';\n          reference = '[' + content + ']: ' + href + title;\n          break\n        case 'shortcut':\n          replacement = '[' + content + ']';\n          reference = '[' + content + ']: ' + href + title;\n          break\n        default:\n          var id = this.references.length + 1;\n          replacement = '[' + content + '][' + id + ']';\n          reference = '[' + id + ']: ' + href + title;\n      }\n\n      this.references.push(reference);\n      return replacement\n    },\n\n    references: [],\n\n    append: function (options) {\n      var references = '';\n      if (this.references.length) {\n        references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n        this.references = []; // Reset references\n      }\n      return references\n    }\n  };\n\n  rules.emphasis = {\n    filter: ['em', 'i'],\n\n    replacement: function (content, node, options) {\n      if (!content.trim()) return ''\n      return options.emDelimiter + content + options.emDelimiter\n    }\n  };\n\n  rules.strong = {\n    filter: ['strong', 'b'],\n\n    replacement: function (content, node, options) {\n      if (!content.trim()) return ''\n      return options.strongDelimiter + content + options.strongDelimiter\n    }\n  };\n\n  rules.code = {\n    filter: function (node) {\n      var hasSiblings = node.previousSibling || node.nextSibling;\n      var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n      return node.nodeName === 'CODE' && !isCodeBlock\n    },\n\n    replacement: function (content) {\n      if (!content.trim()) return ''\n\n      var delimiter = '`';\n      var leadingSpace = '';\n      var trailingSpace = '';\n      var matches = content.match(/`+/gm);\n      if (matches) {\n        if (/^`/.test(content)) leadingSpace = ' ';\n        if (/`$/.test(content)) trailingSpace = ' ';\n        while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n      }\n\n      return delimiter + leadingSpace + content + trailingSpace + delimiter\n    }\n  };\n\n  rules.image = {\n    filter: 'img',\n\n    replacement: function (content, node) {\n      var alt = node.alt || '';\n      var src = node.getAttribute('src') || '';\n      var title = node.title || '';\n      var titlePart = title ? ' \"' + title + '\"' : '';\n      return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\n    }\n  };\n\n  /**\n   * Manages a collection of rules used to convert HTML to Markdown\n   */\n\n  function Rules (options) {\n    this.options = options;\n    this._keep = [];\n    this._remove = [];\n\n    this.blankRule = {\n      replacement: options.blankReplacement\n    };\n\n    this.keepReplacement = options.keepReplacement;\n\n    this.defaultRule = {\n      replacement: options.defaultReplacement\n    };\n\n    this.array = [];\n    for (var key in options.rules) this.array.push(options.rules[key]);\n  }\n\n  Rules.prototype = {\n    add: function (key, rule) {\n      this.array.unshift(rule);\n    },\n\n    keep: function (filter) {\n      this._keep.unshift({\n        filter: filter,\n        replacement: this.keepReplacement\n      });\n    },\n\n    remove: function (filter) {\n      this._remove.unshift({\n        filter: filter,\n        replacement: function () {\n          return ''\n        }\n      });\n    },\n\n    forNode: function (node) {\n      if (node.isBlank) return this.blankRule\n      var rule;\n\n      if ((rule = findRule(this.array, node, this.options))) return rule\n      if ((rule = findRule(this._keep, node, this.options))) return rule\n      if ((rule = findRule(this._remove, node, this.options))) return rule\n\n      return this.defaultRule\n    },\n\n    forEach: function (fn) {\n      for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n    }\n  };\n\n  function findRule (rules, node, options) {\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      if (filterValue(rule, node, options)) return rule\n    }\n    return void 0\n  }\n\n  function filterValue (rule, node, options) {\n    var filter = rule.filter;\n    if (typeof filter === 'string') {\n      if (filter === node.nodeName.toLowerCase()) return true\n    } else if (Array.isArray(filter)) {\n      if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\n    } else if (typeof filter === 'function') {\n      if (filter.call(rule, node, options)) return true\n    } else {\n      throw new TypeError('`filter` needs to be a string, array, or function')\n    }\n  }\n\n  /**\n   * The collapseWhitespace function is adapted from collapse-whitespace\n   * by Luc Thevenard.\n   *\n   * The MIT License (MIT)\n   *\n   * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  /**\n   * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n   *\n   * @param {Object} options\n   */\n  function collapseWhitespace (options) {\n    var element = options.element;\n    var isBlock = options.isBlock;\n    var isVoid = options.isVoid;\n    var isPre = options.isPre || function (node) {\n      return node.nodeName === 'PRE'\n    };\n\n    if (!element.firstChild || isPre(element)) return\n\n    var prevText = null;\n    var prevVoid = false;\n\n    var prev = null;\n    var node = next(prev, element, isPre);\n\n    while (node !== element) {\n      if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n        var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\n\n        if ((!prevText || / $/.test(prevText.data)) &&\n            !prevVoid && text[0] === ' ') {\n          text = text.substr(1);\n        }\n\n        // `text` might be empty at this point.\n        if (!text) {\n          node = remove(node);\n          continue\n        }\n\n        node.data = text;\n\n        prevText = node;\n      } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\n        if (isBlock(node) || node.nodeName === 'BR') {\n          if (prevText) {\n            prevText.data = prevText.data.replace(/ $/, '');\n          }\n\n          prevText = null;\n          prevVoid = false;\n        } else if (isVoid(node)) {\n          // Avoid trimming space around non-block, non-BR void elements.\n          prevText = null;\n          prevVoid = true;\n        }\n      } else {\n        node = remove(node);\n        continue\n      }\n\n      var nextNode = next(prev, node, isPre);\n      prev = node;\n      node = nextNode;\n    }\n\n    if (prevText) {\n      prevText.data = prevText.data.replace(/ $/, '');\n      if (!prevText.data) {\n        remove(prevText);\n      }\n    }\n  }\n\n  /**\n   * remove(node) removes the given node from the DOM and returns the\n   * next node in the sequence.\n   *\n   * @param {Node} node\n   * @return {Node} node\n   */\n  function remove (node) {\n    var next = node.nextSibling || node.parentNode;\n\n    node.parentNode.removeChild(node);\n\n    return next\n  }\n\n  /**\n   * next(prev, current, isPre) returns the next node in the sequence, given the\n   * current and previous nodes.\n   *\n   * @param {Node} prev\n   * @param {Node} current\n   * @param {Function} isPre\n   * @return {Node}\n   */\n  function next (prev, current, isPre) {\n    if ((prev && prev.parentNode === current) || isPre(current)) {\n      return current.nextSibling || current.parentNode\n    }\n\n    return current.firstChild || current.nextSibling || current.parentNode\n  }\n\n  /*\n   * Set up window for Node.js\n   */\n\n  var root = (typeof window !== 'undefined' ? window : {});\n\n  /*\n   * Parsing HTML strings\n   */\n\n  function canParseHTMLNatively () {\n    var Parser = root.DOMParser;\n    var canParse = false;\n\n    // Adapted from https://gist.github.com/1129031\n    // Firefox/Opera/IE throw errors on unsupported types\n    try {\n      // WebKit returns null on unsupported types\n      if (new Parser().parseFromString('', 'text/html')) {\n        canParse = true;\n      }\n    } catch (e) {}\n\n    return canParse\n  }\n\n  function createHTMLParser () {\n    var Parser = function () {};\n\n    {\n      var JSDOM = require('jsdom').JSDOM;\n      Parser.prototype.parseFromString = function (string) {\n        return new JSDOM(string).window.document\n      };\n    }\n    return Parser\n  }\n\n  var HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\n\n  function RootNode (input) {\n    var root;\n    if (typeof input === 'string') {\n      var doc = htmlParser().parseFromString(\n        // DOM parsers arrange elements in the <head> and <body>.\n        // Wrapping in a custom element ensures elements are reliably arranged in\n        // a single element.\n        '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\n        'text/html'\n      );\n      root = doc.getElementById('turndown-root');\n    } else {\n      root = input.cloneNode(true);\n    }\n    collapseWhitespace({\n      element: root,\n      isBlock: isBlock,\n      isVoid: isVoid\n    });\n\n    return root\n  }\n\n  var _htmlParser;\n  function htmlParser () {\n    _htmlParser = _htmlParser || new HTMLParser();\n    return _htmlParser\n  }\n\n  function Node (node) {\n    node.isBlock = isBlock(node);\n    node.isCode = node.nodeName.toLowerCase() === 'code' || node.parentNode.isCode;\n    node.isBlank = isBlank(node);\n    node.flankingWhitespace = flankingWhitespace(node);\n    return node\n  }\n\n  function isBlank (node) {\n    return (\n      ['A', 'TH', 'TD', 'IFRAME', 'SCRIPT', 'AUDIO', 'VIDEO'].indexOf(node.nodeName) === -1 &&\n      /^\\s*$/i.test(node.textContent) &&\n      !isVoid(node) &&\n      !hasVoid(node)\n    )\n  }\n\n  function flankingWhitespace (node) {\n    var leading = '';\n    var trailing = '';\n\n    if (!node.isBlock) {\n      var hasLeading = /^[ \\r\\n\\t]/.test(node.textContent);\n      var hasTrailing = /[ \\r\\n\\t]$/.test(node.textContent);\n\n      if (hasLeading && !isFlankedByWhitespace('left', node)) {\n        leading = ' ';\n      }\n      if (hasTrailing && !isFlankedByWhitespace('right', node)) {\n        trailing = ' ';\n      }\n    }\n\n    return { leading: leading, trailing: trailing }\n  }\n\n  function isFlankedByWhitespace (side, node) {\n    var sibling;\n    var regExp;\n    var isFlanked;\n\n    if (side === 'left') {\n      sibling = node.previousSibling;\n      regExp = / $/;\n    } else {\n      sibling = node.nextSibling;\n      regExp = /^ /;\n    }\n\n    if (sibling) {\n      if (sibling.nodeType === 3) {\n        isFlanked = regExp.test(sibling.nodeValue);\n      } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\n        isFlanked = regExp.test(sibling.textContent);\n      }\n    }\n    return isFlanked\n  }\n\n  var reduce = Array.prototype.reduce;\n  var leadingNewLinesRegExp = /^\\n*/;\n  var trailingNewLinesRegExp = /\\n*$/;\n  var escapes = [\n    [/\\\\/g, '\\\\\\\\'],\n    [/\\*/g, '\\\\*'],\n    [/^-/g, '\\\\-'],\n    [/^\\+ /g, '\\\\+ '],\n    [/^(=+)/g, '\\\\$1'],\n    [/^(#{1,6}) /g, '\\\\$1 '],\n    [/`/g, '\\\\`'],\n    [/^~~~/g, '\\\\~~~'],\n    [/\\[/g, '\\\\['],\n    [/\\]/g, '\\\\]'],\n    [/^>/g, '\\\\>'],\n    [/_/g, '\\\\_'],\n    [/^(\\d+)\\. /g, '$1\\\\. ']\n  ];\n\n  function TurndownService (options) {\n    if (!(this instanceof TurndownService)) return new TurndownService(options)\n\n    var defaults = {\n      rules: rules,\n      headingStyle: 'setext',\n      hr: '* * *',\n      bulletListMarker: '*',\n      codeBlockStyle: 'indented',\n      fence: '```',\n      emDelimiter: '_',\n      strongDelimiter: '**',\n      linkStyle: 'inlined',\n      linkReferenceStyle: 'full',\n      br: '  ',\n      blankReplacement: function (content, node) {\n        return node.isBlock ? '\\n\\n' : ''\n      },\n      keepReplacement: function (content, node) {\n        return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\n      },\n      defaultReplacement: function (content, node) {\n        return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\n      }\n    };\n    this.options = extend({}, defaults, options);\n    this.rules = new Rules(this.options);\n  }\n\n  TurndownService.prototype = {\n    /**\n     * The entry point for converting a string or DOM node to Markdown\n     * @public\n     * @param {String|HTMLElement} input The string or DOM node to convert\n     * @returns A Markdown representation of the input\n     * @type String\n     */\n\n    turndown: function (input) {\n      if (!canConvert(input)) {\n        throw new TypeError(\n          input + ' is not a string, or an element/document/fragment node.'\n        )\n      }\n\n      if (input === '') return ''\n\n      var output = process.call(this, new RootNode(input));\n      return postProcess.call(this, output)\n    },\n\n    /**\n     * Add one or more plugins\n     * @public\n     * @param {Function|Array} plugin The plugin or array of plugins to add\n     * @returns The Turndown instance for chaining\n     * @type Object\n     */\n\n    use: function (plugin) {\n      if (Array.isArray(plugin)) {\n        for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n      } else if (typeof plugin === 'function') {\n        plugin(this);\n      } else {\n        throw new TypeError('plugin must be a Function or an Array of Functions')\n      }\n      return this\n    },\n\n    /**\n     * Adds a rule\n     * @public\n     * @param {String} key The unique key of the rule\n     * @param {Object} rule The rule\n     * @returns The Turndown instance for chaining\n     * @type Object\n     */\n\n    addRule: function (key, rule) {\n      this.rules.add(key, rule);\n      return this\n    },\n\n    /**\n     * Keep a node (as HTML) that matches the filter\n     * @public\n     * @param {String|Array|Function} filter The unique key of the rule\n     * @returns The Turndown instance for chaining\n     * @type Object\n     */\n\n    keep: function (filter) {\n      this.rules.keep(filter);\n      return this\n    },\n\n    /**\n     * Remove a node that matches the filter\n     * @public\n     * @param {String|Array|Function} filter The unique key of the rule\n     * @returns The Turndown instance for chaining\n     * @type Object\n     */\n\n    remove: function (filter) {\n      this.rules.remove(filter);\n      return this\n    },\n\n    /**\n     * Escapes Markdown syntax\n     * @public\n     * @param {String} string The string to escape\n     * @returns A string with Markdown syntax escaped\n     * @type String\n     */\n\n    escape: function (string) {\n      return escapes.reduce(function (accumulator, escape) {\n        return accumulator.replace(escape[0], escape[1])\n      }, string)\n    }\n  };\n\n  /**\n   * Reduces a DOM node down to its Markdown string equivalent\n   * @private\n   * @param {HTMLElement} parentNode The node to convert\n   * @returns A Markdown representation of the node\n   * @type String\n   */\n\n  function process (parentNode) {\n    var self = this;\n    return reduce.call(parentNode.childNodes, function (output, node) {\n      node = new Node(node);\n\n      var replacement = '';\n      if (node.nodeType === 3) {\n        replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\n      } else if (node.nodeType === 1) {\n        replacement = replacementForNode.call(self, node);\n      }\n\n      return join(output, replacement)\n    }, '')\n  }\n\n  /**\n   * Appends strings as each rule requires and trims the output\n   * @private\n   * @param {String} output The conversion output\n   * @returns A trimmed version of the ouput\n   * @type String\n   */\n\n  function postProcess (output) {\n    var self = this;\n    this.rules.forEach(function (rule) {\n      if (typeof rule.append === 'function') {\n        output = join(output, rule.append(self.options));\n      }\n    });\n\n    return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\n  }\n\n  /**\n   * Converts an element node to its Markdown equivalent\n   * @private\n   * @param {HTMLElement} node The node to convert\n   * @returns A Markdown representation of the node\n   * @type String\n   */\n\n  function replacementForNode (node) {\n    var rule = this.rules.forNode(node);\n    var content = process.call(this, node);\n    var whitespace = node.flankingWhitespace;\n    if (whitespace.leading || whitespace.trailing) content = content.trim();\n    return (\n      whitespace.leading +\n      rule.replacement(content, node, this.options) +\n      whitespace.trailing\n    )\n  }\n\n  /**\n   * Determines the new lines between the current output and the replacement\n   * @private\n   * @param {String} output The current conversion output\n   * @param {String} replacement The string to append to the output\n   * @returns The whitespace to separate the current output and the replacement\n   * @type String\n   */\n\n  function separatingNewlines (output, replacement) {\n    var newlines = [\n      output.match(trailingNewLinesRegExp)[0],\n      replacement.match(leadingNewLinesRegExp)[0]\n    ].sort();\n    var maxNewlines = newlines[newlines.length - 1];\n    return maxNewlines.length < 2 ? maxNewlines : '\\n\\n'\n  }\n\n  function join (string1, string2) {\n    var separator = separatingNewlines(string1, string2);\n\n    // Remove trailing/leading newlines and replace with separator\n    string1 = string1.replace(trailingNewLinesRegExp, '');\n    string2 = string2.replace(leadingNewLinesRegExp, '');\n\n    return string1 + separator + string2\n  }\n\n  /**\n   * Determines whether an input can be converted\n   * @private\n   * @param {String|HTMLElement} input Describe this parameter\n   * @returns Describe what it returns\n   * @type String|Object|Array|Boolean|Number\n   */\n\n  function canConvert (input) {\n    return (\n      input != null && (\n        typeof input === 'string' ||\n        (input.nodeType && (\n          input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\n        ))\n      )\n    )\n  }\n\n  return TurndownService;\n\n});\n\ndefine('skylark-utils-md/Turndown',[\r\n\t\"skylark-langx/langx\",\r\n    \"./markdown\",\r\n    \"./primitives/turndown\"\r\n], function(langx,markdown, TurndownService) {\r\n\r\n   return markdown.Turndown =  TurndownService;\r\n});\ndefine('skylark-utils-md/main',[\r\n    \"./markdown\",\r\n    \"./Parser\",\r\n    \"./Turndown\"\r\n], function(markdown) {\r\n    return markdown;\r\n});\r\n\ndefine('skylark-utils-md', ['skylark-utils-md/main'], function (main) { return main; });\n\n"]}